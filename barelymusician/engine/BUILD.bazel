load("@rules_cc//cc:defs.bzl", "cc_library", "cc_test")

package(default_visibility = ["//barelymusician:__pkg__"])

cc_library(
    name = "control",
    srcs = ["control.cpp"],
    hdrs = ["control.h"],
    deps = [
        ":number",
        "//barelymusician:include",
    ],
)

cc_library(
    name = "engine",
    srcs = ["engine.cpp"],
    hdrs = ["engine.h"],
    deps = [
        ":id",
        ":instrument",
        ":mutable_data",
        ":number",
        ":performer",
        ":task",
        "//barelymusician/common:find_or_null",
        "//barelymusician/dsp:dsp_utils",
    ],
)

cc_library(
    name = "id",
    hdrs = ["id.h"],
    deps = [
        "//barelymusician:include",
    ],
)

cc_library(
    name = "instrument",
    srcs = ["instrument.cpp"],
    hdrs = ["instrument.h"],
    deps = [
        ":control",
        ":message",
        ":message_queue",
        ":status",
        "//barelymusician:include",
        "//barelymusician/common:find_or_null",
        "//barelymusician/dsp:dsp_utils",
    ],
)

cc_library(
    name = "message",
    hdrs = ["message.h"],
    deps = [
        ":number",
    ],
)

cc_library(
    name = "message_queue",
    srcs = ["message_queue.cpp"],
    hdrs = ["message_queue.h"],
    deps = [
        ":message",
        ":number",
    ],
)

cc_library(
    name = "mutable_data",
    hdrs = ["mutable_data.h"],
)

cc_library(
    name = "number",
    hdrs = ["number.h"],
    deps = [
        "//barelymusician:include",
    ],
)

cc_library(
    name = "performer",
    srcs = ["performer.cpp"],
    hdrs = ["performer.h"],
    deps = [
        ":id",
        ":number",
        ":status",
        ":task",
        "//barelymusician/common:find_or_null",
    ],
)

cc_library(
    name = "status",
    hdrs = ["status.h"],
)

cc_library(
    name = "task",
    srcs = ["task.cpp"],
    hdrs = ["task.h"],
    deps = [
        ":id",
        ":number",
        "//barelymusician:include",
    ],
)

cc_test(
    name = "control_test",
    srcs = ["control_test.cpp"],
    deps = [
        ":control",
        "@googletest//:gtest_main",
    ],
)

# TODO(#109): Reenable after API cleanup.
# cc_test(
#     name = "engine_test",
#     srcs = ["engine_test.cpp"],
#     deps = [
#         ":control",
#         ":engine",
#         ":id",
#         ":instrument",
#         "@googletest//:gtest_main",
#     ],
# )

cc_test(
    name = "instrument_test",
    srcs = ["instrument_test.cpp"],
    deps = [
        ":control",
        ":instrument",
        ":status",
        "@googletest//:gtest_main",
    ],
)

cc_test(
    name = "message_queue_test",
    srcs = ["message_queue_test.cpp"],
    deps = [
        ":message",
        ":message_queue",
        ":number",
        "@googletest//:gtest_main",
    ],
)

cc_test(
    name = "mutable_data_test",
    srcs = ["mutable_data_test.cpp"],
    deps = [
        ":mutable_data",
        ":number",
        "@googletest//:gtest_main",
    ],
)

# TODO(#109): Reenable after API cleanup.
# cc_test(
#     name = "performer_test",
#     srcs = ["performer_test.cpp"],
#     deps = [
#         ":performer",
#         "@googletest//:gtest_main",
#     ],
# )

cc_test(
    name = "task_test",
    srcs = ["task_test.cpp"],
    deps = [
        ":number",
        ":task",
        "@googletest//:gtest_main",
    ],
)
